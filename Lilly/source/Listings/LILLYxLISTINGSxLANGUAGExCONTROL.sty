\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{LILLYxLISTINGSxLANGUAGExCONTROL}[2019/07/14 Verwaltet Sprachen fuer die Listings-Erweiterungen von LILLY]
\RequirePackage{LILLYxCORE,LILLYxLISTINGS,LILLYxLISTINGSxADVANCED,LILLYxCONTROLLERxBOX}
\tcbuselibrary{listingsutf8}% Lilly won't used minted. Minted would need a seperate installation of pygments. Urgh
% pgf-keys control
\gdef\lillylstset#1{\pgfkeys{/lillyxLISTINGS/.cd, #1}}
\pgfkeys{/lillyxLISTINGS/.is family}
% Here we define globals, which are basically applied to every listing - like for example the initial style
\pgfkeys{/lillyxLISTINGS/globals/.is family,%
         /lillyxLISTINGS/globals,%
        listing style/.initial = {MAIN}}
% Just to provide a clearer structure the keys will be defined seperate for all different styles.
\pgfkeys{/lillyxLISTINGS/default/.is family,%
    /lillyxLISTINGS/default,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {},%
      command name suffix/.initial = {},%
      constructor command/.initial={LillyNewLstEnvironCore}}
\pgfkeys{/lillyxLISTINGS/nonumber/.is family,%
    /lillyxLISTINGS/nonumber,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {},%
      command name suffix/.initial = {*},%
      constructor command/.initial={LillyNewLstEnvironCoreStarred}}
\pgfkeys{/lillyxLISTINGS/plain/.is family,%
    /lillyxLISTINGS/plain,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {plain},%
      command name suffix/.initial = {},%
      constructor command/.initial={LillyNewLstEnvironPlain}}
\pgfkeys{/lillyxLISTINGS/pnum/.is family,%
    /lillyxLISTINGS/pnum,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {pnum},%
      command name suffix/.initial = {},%
      constructor command/.initial={LillyNewLstEnvironPlainWNums}}
\pgfkeys{/lillyxLISTINGS/presentation/.is family,%
    /lillyxLISTINGS/presentation,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {s},% This one was used to create the show environment. it's kept for historcal reasons
      command name suffix/.initial = {},%
      constructor command/.initial={LillyNewLstEnvironPresent}}
% Inlines
\pgfkeys{/lillyxLISTINGS/inline default/.is family,%
    /lillyxLISTINGS/inline default,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {c},
      command name suffix/.initial = {},
      draw command/.initial={LILLYxLSTINLINE}}
\pgfkeys{/lillyxLISTINGS/inline blank/.is family,%
    /lillyxLISTINGS/inline blank,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {b},
      command name suffix/.initial = {},
      draw command/.initial={LILLYxLSTBLANKINLINE}}
\pgfkeys{/lillyxLISTINGS/inline input/.is family,%
    /lillyxLISTINGS/inline input,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {i},
      command name suffix/.initial = {},
      draw command/.initial={LILLYxLSTINPL}}
\pgfkeys{/lillyxLISTINGS/inline present/.is family,%
    /lillyxLISTINGS/inline present,
      listing style/.initial = {\pgfkeysvalueof{/lillyxLISTINGS/globals/listing style}},
      command name prefix/.initial = {p},
      command name suffix/.initial = {},
      draw command/.initial={LILLYxLSTINLINExADVANCED}}
% Environments used to style the languages
% They all HAVE to follow the signature of one optional followed by one mandatory Argument

\newlength\lilly@lst@outer@spacing \lilly@lst@outer@spacing=3pt

\DeclareTCBListing{presentlst}{%
        O{} % Listing Args
        O{} % TCB Args
        m   % Language
}{%
  lstpresenterstyle, enlarge top by=\lilly@lst@outer@spacing,enlarge bottom by=\lilly@lst@outer@spacing,
  listing options={%
    style=LSTADVANCED,
    language=#3,#1},#2%
}
{}
\DeclareTCBListing{plainlst}{%
        O{} % Listing Args
        O{} % TCB Args
        m   % Language
}{%
  enhanced jigsaw,breakable,blankest,listing only,enlarge top by=\lilly@lst@outer@spacing,enlarge bottom by=\lilly@lst@outer@spacing,
  listing options={%
    style=MAIN,
    language=#3,%set known plain options:
    xleftmargin=\z@,xrightmargin=\z@,%
    numbers=none,numbersep=\z@,frame=none,%
    rulecolor={},backgroundcolor={},#1},#2%
}
{}
\DeclareTCBListing{defaultlst}{%
        O{} % Listing Args
        O{} % TCB Args
        m   % Language
}{%
  enhanced jigsaw,breakable,blankest,listing only,enlarge top by=\lilly@lst@outer@spacing,enlarge bottom by=\lilly@lst@outer@spacing,
  listing options={%
    style=MAIN,
    language=#3,#1},#2, after={\\[-0.25\baselineskip]}%
}
{}

\DeclareTCBListing{sclatex}{% preview latex code
        O{} % Listing Args
        O{} % TCB Args
}{%
  enhanced jigsaw,breakable,blankest,enlarge top by=\lilly@lst@outer@spacing,enlarge bottom by=\lilly@lst@outer@spacing,listing side text,righthand width=3.5cm,before lower={\vspace*{-0.75\baselineskip}},
  listing options={%
    style=MAIN,
    language=lLatex,#1},#2, after={\\[-0.25\baselineskip]},
}
{}

% Registration of Languages :D
% #1 Name
% #2 Key
% #3 In Extra
% #4 Out Extra
% #5 Language
\def\LillyNewLstEnvironCore#1#2#3#4#5{%
        %This does already work, but has the drawback of not being able to provide the (wanted) different styles
      \lstnewenvironment{#1}[1][]{#3\lstset{##1}}{#4}%
}
% #1 Name #2 Key #3 In Extra #4 Out Extra #5 Language
\def\LillyNewLstEnvironCoreStarred#1#2#3#4#5{\lstnewenvironment{#1}[1][]{#3\lstset{style=nonum,##1}}{#4}}
% #1 Name #2 Key #3 In Extra #4 Out Extra #5 Language
\def\LillyNewLstEnvironPlain#1#2#3#4#5{%
  \lstnewenvironment{#1}[1][]{#3\lstset{xleftmargin=\z@,xrightmargin=\z@,%
  numbers=none,numbersep=\z@,frame=none,%
  rulecolor={},backgroundcolor={},##1}}{#4}%
}
% #1 Name #2 Key #3 In Extra #4 Out Extra #5 Language
\def\LillyNewLstEnvironPlainWNums#1#2#3#4#5{%
  \lstnewenvironment{#1}[1][]{#3\lstset{xleftmargin=\z@,xrightmargin=\z@,%
  numbers=left,numbersep=7pt,frame=none,%
  rulecolor={},backgroundcolor={},##1}}{#4}%
}


% #1 Name #2 Key #3 In Extra #4 Out Extra #5 Language
% NOTE: currently no opt arg, as \@ifnextchar breaks scanning of lst@next
\def\LillyNewLstEnvironPresent#1#2#3#4#5{%
\expandafter\xdef\csname#1\endcsname{\noexpand\leavevmode\noexpand\presentlst{#5}}
\expandafter\xdef\csname end#1\endcsname{\noexpand\endpresentlst}
}

% #1 KeyName #2 LanguageName #3 EnvironName
\def\Lilly@NewLstEnviron#1#2#3{%
\begingroup
      \edef\xxcurlst{\expandafter\noexpand\csname\pgfkeysvalueof{/lillyxLISTINGS/\environName/constructor command}\endcsname{#3}{#1}{\noexpand\lstset{style=\pgfkeysvalueof{/lillyxLISTINGS/\environName/listing style},language=#2}}{}{#2}}
  \global\xxcurlst
\endgroup
\globaldefs=0%
}

\DeclareDocumentCommand{\RegisterLanguage}{%
  m   % Name of the Language [java,latex]
  m   % Name of the corresponding lst-Language [lJava, lLatex,...]
  O{RegisteredLanguages}      % List it should register to - check for already existing output warning
  O{RegisteredLanguageNames}  % List to enter the Name - check for already existing, output warning
}{%
% Register the Environments
% This will allow us to construct the environments via foreach :D
\foreach \environName in {default,nonumber,plain,pnum,presentation}{%
    \debugout{Register 'env \environName' for #1/#2}%
      \edef\environCurName{\pgfkeysvalueof{/lillyxLISTINGS/\environName/command name prefix}#1\pgfkeysvalueof{/lillyxLISTINGS/\environName/command name suffix}}% assign
      \debugout{\space > Environment Name: [\environCurName]}%
      \debugout{\space > Constructor: [\pgfkeysvalueof{/lillyxLISTINGS/\environName/constructor command}]}%
      \edef\CreateAnLstEnviron{\noexpand\Lilly@NewLstEnviron{\environName}{#2}{\environCurName}}% fully expand the Name, otherwise it would be undefined when the environment gets used
      \CreateAnLstEnviron
}
% This procedure can be used in persistence to iterate over the pgf-keys
% Register 'inline default'
\foreach \inlineName in {default,blank,input,present}{%
  \debugout{Register 'inline \inlineName' for #1/#2}%
    \edef\inlineCurName{\pgfkeysvalueof{/lillyxLISTINGS/inline \inlineName/command name prefix}#1\pgfkeysvalueof{/lillyxLISTINGS/inline \inlineName/command name suffix}}% assign
    \debugout{\space > Command Name: [\inlineCurName]}%
    \debugout{\space > Style: [\pgfkeysvalueof{/lillyxLISTINGS/inline \inlineName/listing style}]}%
    \debugout{\space > Draw Command: [\pgfkeysvalueof{/lillyxLISTINGS/inline \inlineName/draw command}]}%
    % We will construct those with optional arguments, to give the user a chance to pass optional Arguments :D
    % luckily we can construct the main Argument without any expansion problems :D
    \expandafter\xdef\csname\inlineCurName\endcsname{\noexpand\protect\noexpand\@ifnextchar[{\noexpand\protect\expandafter\noexpand\csname @@hasopt@@\inlineCurName\endcsname}{\noexpand\protect\expandafter\noexpand\csname @@noopt@@\inlineCurName\endcsname}}%
    % Variant without optionals :D
    \expandafter\xdef\csname @@noopt@@\inlineCurName\endcsname####1{\noexpand\protect\expandafter\noexpand\csname\pgfkeysvalueof{/lillyxLISTINGS/inline \inlineName/draw command}\endcsname{style=\pgfkeysvalueof{/lillyxLISTINGS/inline \inlineName/listing style},language=#2}{####1}}%
    % Variant with one optional argument, it will be matched by the default delimiter
    \expandafter\xdef\csname @@hasopt@@\inlineCurName\endcsname[####1]####2{\noexpand\protect\expandafter\noexpand\csname\pgfkeysvalueof{/lillyxLISTINGS/inline \inlineName/draw command}\endcsname{style=\pgfkeysvalueof{/lillyxLISTINGS/inline \inlineName/listing style},language=#2,####1}{####2}}%
    \expandafter\robustify\csname\inlineCurName\endcsname% robustify
}%
  %
  % END: Register Language to supplied Lists:
  \pushList{#3}{#1/#2}% Register Signature
  \pushList{#4}{#1}% Register Name (extra)
}

\lstdefinelanguage{lVoid}{columns=fixed,moredelim=[is][{}]{|plain|}{|plain|},moredelim=[is][{\itshape\color{Purple}}]{|ihl|}{|ihl|},moredelim=**[is][\digitstyle]{|num|}{|num|}}
\RegisterLanguage{void}{lVoid}
\endinput